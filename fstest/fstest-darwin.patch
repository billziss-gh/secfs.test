diff --git a/Makefile b/Makefile
index 4a0f5cd..17ad1dc 100644
--- a/Makefile
+++ b/Makefile
@@ -1,16 +1,23 @@
 # $FreeBSD: src/tools/regression/fstest/Makefile,v 1.1 2007/01/17 01:42:07 pjd Exp $
 
-#CFLAGS+=-DHAS_LCHMOD
+Platform=$(shell uname)
+
+ifeq ($(Platform),Darwin)
+CFLAGS+=-DHAS_LCHMOD
+endif
 #CFLAGS+=-DHAS_CHFLAGS
 #CFLAGS+=-DHAS_LCHFLAGS
 #CFLAGS+=-DHAS_TRUNCATE64
 #CFLAGS+=-DHAS_STAT64
-CFLAGS+=-DHAS_ACL -lacl
+ifeq ($(Platform),Linux)
+CFLAGS+=-DHAS_ACL
+LDLIBS=-lacl
+endif
 
 all:	fstest
 
 fstest:	fstest.c
-	gcc -Wall ${CFLAGS} fstest.c -o fstest
+	gcc -Wall ${CFLAGS} fstest.c -o fstest ${LDLIBS}
 
 clean:
 	rm -f fstest
diff --git a/README b/README
index 53f50e2..1540a80 100644
--- a/README
+++ b/README
@@ -5,7 +5,7 @@ Few notes on how to use fstest in short steps:
 	# cd fstest
 	# vi tests/conf
 	Change 'fs' to file system type you want to test. These can be:
-	UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs.
+	UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs, secfs.
 	# vi Makefile
 	You may need to manually tweak few things by editing CFLAGS lines
 	at the top of the file.
@@ -17,9 +17,9 @@ Few notes on how to use fstest in short steps:
 
 That's all. Enjoy.
 
-Currently supported operating systems: FreeBSD, Solaris, Linux.
+Currently supported operating systems: FreeBSD, Solaris, Linux, Darwin.
 Currently supported file system types: UFS, ZFS, ext3, ext4, ntfs-3g,
-                                       xfs, btrfs, glusterfs.
+                                       xfs, btrfs, glusterfs, secfs.
 
 Author: 
 Pawel Jakub Dawidek <pjd@FreeBSD.org>
@@ -30,3 +30,6 @@ Szabolcs Szakacsits <szaka@ntfs-3g.org>
 
 updates by:
 Zorro Lang <zlang@redhat.com>
+
+Darwin/OSXFUSE port:
+Bill Zissimopoulos <billziss at navimatics.com>
\ No newline at end of file
diff --git a/tests/chmod/00.t b/tests/chmod/00.t
index 700fbb7..eb14ddd 100755
--- a/tests/chmod/00.t
+++ b/tests/chmod/00.t
@@ -177,7 +177,7 @@ if supported lchmod; then
 	expect 0 symlink ${n1} ${n0}
 	ctime1=`${fstest} lstat ${n0} ctime`
 	sleep 1
-	expect EPERM -u 65534 lchmod ${n0} 0321
+	expect "EACCES|EPERM" -u 65534 lchmod ${n0} 0321
 	ctime2=`${fstest} lstat ${n0} ctime`
 	test_check $ctime1 -eq $ctime2
 	expect 0 unlink ${n0}
diff --git a/tests/chmod/11.t b/tests/chmod/11.t
index 1cba21a..124a649 100755
--- a/tests/chmod/11.t
+++ b/tests/chmod/11.t
@@ -42,7 +42,7 @@ SunOS)
 	expect 0 -u 65534 -g 65534 chmod ${n1} 01644
 	expect 0644 stat ${n1} mode
 	;;
-Linux)
+Linux|Darwin)
 	expect 0 -u 65534 -g 65534 chmod ${n1} 01644
 	expect 01644 stat ${n1} mode
 	;;
diff --git a/tests/chown/07.t b/tests/chown/07.t
index af51ec5..1f7866c 100755
--- a/tests/chown/07.t
+++ b/tests/chown/07.t
@@ -19,7 +19,14 @@ expect 0 mkdir ${n1} 0755
 expect 0 chown ${n1} 65534 65534
 expect 0 -u 65534 -g 65534 create ${n1}/${n2} 0644
 expect EPERM -u 65534 -g 65534 chown ${n1}/${n2} 65533 65533
-expect EPERM -u 65533 -g 65533 chown ${n1}/${n2} 65534 65534
+case "${os}" in
+Darwin)
+    expect 0 -u 65533 -g 65533 chown ${n1}/${n2} 65534 65534
+    ;;
+*)
+    expect EPERM -u 65533 -g 65533 chown ${n1}/${n2} 65534 65534
+    ;;
+esac
 expect EPERM -u 65533 -g 65533 chown ${n1}/${n2} 65533 65533
 expect EPERM -u 65534 -g 65534 -- chown ${n1}/${n2} -1 65533
 expect 0 unlink ${n1}/${n2}
diff --git a/tests/conf b/tests/conf
index 0693ec9..18cd344 100644
--- a/tests/conf
+++ b/tests/conf
@@ -4,5 +4,5 @@
 # Known operating systems: FreeBSD, SunOS, Linux
 os=`uname`
 
-# Known file systems: UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs
-fs="ext3"
+# Known file systems: UFS, ZFS, ext3, ext4, ntfs-3g, xfs, btrfs, glusterfs, HFS+, secfs
+fs="secfs"
diff --git a/tests/link/03.t b/tests/link/03.t
index 0ad3354..bf5b228 100755
--- a/tests/link/03.t
+++ b/tests/link/03.t
@@ -6,27 +6,34 @@ desc="link returns ENAMETOOLONG if an entire length of either path name exceeded
 dir=`dirname $0`
 . ${dir}/../misc.sh
 
-echo "1..16"
+case "${os}:${fs}" in
+Darwin:*)
+    # This test creates an unremovable file on Darwin:HFS+; so disable it!
+    quick_exit
+    ;;
+*)
+    echo "1..16"
 
-n0=`namegen`
+    n0=`namegen`
 
-expect 0 mkdir ${name255} 0755
-expect 0 mkdir ${name255}/${name255} 0755
-expect 0 mkdir ${name255}/${name255}/${name255} 0755
-expect 0 mkdir ${path1021} 0755
-expect 0 create ${path1023} 0644
-expect 0 link ${path1023} ${n0}
-expect 0 unlink ${path1023}
-expect 0 link ${n0} ${path1023}
-expect 0 unlink ${path1023}
-create_too_long
-expect ENAMETOOLONG link ${n0} ${too_long}
-unlink_too_long
-expect 0 unlink ${n0}
-create_too_long
-expect ENAMETOOLONG link ${too_long} ${n0}
-unlink_too_long
-expect 0 rmdir ${path1021}
-expect 0 rmdir ${name255}/${name255}/${name255}
-expect 0 rmdir ${name255}/${name255}
-expect 0 rmdir ${name255}
+    expect 0 mkdir ${name255} 0755
+    expect 0 mkdir ${name255}/${name255} 0755
+    expect 0 mkdir ${name255}/${name255}/${name255} 0755
+    expect 0 mkdir ${path1021} 0755
+    expect 0 create ${path1023} 0644
+    expect 0 link ${path1023} ${n0}
+    expect 0 unlink ${path1023}
+    expect 0 link ${n0} ${path1023}
+    expect 0 unlink ${path1023}
+    create_too_long
+    expect ENAMETOOLONG link ${n0} ${too_long}
+    unlink_too_long
+    expect 0 unlink ${n0}
+    create_too_long
+    expect ENAMETOOLONG link ${too_long} ${n0}
+    unlink_too_long
+    expect 0 rmdir ${path1021}
+    expect 0 rmdir ${name255}/${name255}/${name255}
+    expect 0 rmdir ${name255}/${name255}
+    expect 0 rmdir ${name255}
+esac
diff --git a/tests/misc.sh b/tests/misc.sh
index 0faefcb..6714f8f 100644
--- a/tests/misc.sh
+++ b/tests/misc.sh
@@ -16,6 +16,8 @@ else
 	maindir="`pwd`/${dir}/../.."
 fi
 fstest="${maindir}/fstest"
+[ -x "${fstest}" ] || fstest="${maindir}/../../tools/bin/fstest"
+[ -x "${fstest}" ] || fstest="fstest"
 . ${maindir}/tests/conf
 
 run_getconf()
@@ -69,12 +71,12 @@ expect()
 {
 	e="${1}"
 	shift
-	r=`${fstest} $* 2>/dev/null | tail -1`
+	r=`${fstest} $* 2>&1 | tail -1`
 	echo "${r}" | egrep '^'${e}'$' >/dev/null 2>&1
 	if [ $? -eq 0 ]; then
-		echo "ok ${ntest}"
+		echo "ok ${ntest}" - expect "$e" "$@"
 	else
-		echo "not ok ${ntest}"
+		echo "not ok ${ntest}" - expect "$e" "$@" - got "$r"
 	fi
 	ntest=`expr $ntest + 1`
 }
@@ -98,16 +100,21 @@ jexpect()
 test_check()
 {
 	if [ $* ]; then
-		echo "ok ${ntest}"
+		echo "ok ${ntest}" - test_check "$@"
 	else
-		echo "not ok ${ntest}"
+		echo "not ok ${ntest}" - test_check "$@"
 	fi
 	ntest=`expr $ntest + 1`
 }
 
 namegen()
 {
-	echo "fstest_`dd if=/dev/urandom bs=1k count=1 2>/dev/null | md5sum  | cut -f1 -d' '`"
+    if which md5sum >/dev/null; then
+        md5sum=md5sum
+    else
+        md5sum=md5
+    fi
+	echo "fstest_`dd if=/dev/urandom bs=1k count=1 2>/dev/null | ${md5sum}  | cut -f1 -d' '`"
 }
 
 quick_exit()
@@ -126,9 +133,13 @@ supported()
 		fi
 		;;
 	lchmod)
-		if [ ${os} != "FreeBSD" ]; then
-			return 1
+		if [ ${os} = "FreeBSD" ]; then
+			return 0
+		fi
+		if [ ${os} = "Darwin" ]; then
+			return 0
 		fi
+        return 1
 		;;
 	esac
 	return 0
diff --git a/tests/mkfifo/03.t b/tests/mkfifo/03.t
index 4c1feed..6c77fdb 100755
--- a/tests/mkfifo/03.t
+++ b/tests/mkfifo/03.t
@@ -6,18 +6,25 @@ desc="mkfifo returns ENAMETOOLONG if an entire path name exceeded 1023 character
 dir=`dirname $0`
 . ${dir}/../misc.sh
 
-echo "1..11"
+case "${os}:${fs}" in
+Darwin:HFS+)
+    # This test creates an unremovable file on Darwin:HFS+; so disable it!
+    quick_exit
+    ;;
+*)
+    echo "1..11"
 
-expect 0 mkdir ${name255} 0755
-expect 0 mkdir ${name255}/${name255} 0755
-expect 0 mkdir ${name255}/${name255}/${name255} 0755
-expect 0 mkdir ${path1021} 0755
-expect 0 mkfifo ${path1023} 0644
-expect 0 unlink ${path1023}
-create_too_long
-expect ENAMETOOLONG mkfifo ${too_long} 0644
-unlink_too_long
-expect 0 rmdir ${path1021}
-expect 0 rmdir ${name255}/${name255}/${name255}
-expect 0 rmdir ${name255}/${name255}
-expect 0 rmdir ${name255}
+    expect 0 mkdir ${name255} 0755
+    expect 0 mkdir ${name255}/${name255} 0755
+    expect 0 mkdir ${name255}/${name255}/${name255} 0755
+    expect 0 mkdir ${path1021} 0755
+    expect 0 mkfifo ${path1023} 0644
+    expect 0 unlink ${path1023}
+    create_too_long
+    expect ENAMETOOLONG mkfifo ${too_long} 0644
+    unlink_too_long
+    expect 0 rmdir ${path1021}
+    expect 0 rmdir ${name255}/${name255}/${name255}
+    expect 0 rmdir ${name255}/${name255}
+    expect 0 rmdir ${name255}
+esac
diff --git a/tests/open/17.t b/tests/open/17.t
index d662d37..0dc5b7c 100755
--- a/tests/open/17.t
+++ b/tests/open/17.t
@@ -11,5 +11,13 @@ echo "1..3"
 n0=`namegen`
 
 expect 0 mkfifo ${n0} 0644
-expect ENXIO open ${n0} O_WRONLY,O_NONBLOCK
+case "${os}:${fs}" in
+Darwin:secfs)
+    # This appears to be a problem in OSXFUSE; secfs-fuse does not even see the open() call.
+    expect EPERM open ${n0} O_WRONLY,O_NONBLOCK
+    ;;
+*)
+    expect ENXIO open ${n0} O_WRONLY,O_NONBLOCK
+    ;;
+esac
 expect 0 unlink ${n0}
diff --git a/tests/rename/00.t b/tests/rename/00.t
index 85d1014..7f9140a 100755
--- a/tests/rename/00.t
+++ b/tests/rename/00.t
@@ -77,7 +77,25 @@ ctime1=`${fstest} stat ${n0} ctime`
 sleep 1
 expect 0 rename ${n0} ${n1}
 ctime2=`${fstest} stat ${n1} ctime`
-test_check $ctime1 -lt $ctime2
+case "${os}:${fs}" in
+Darwin:*|*:secfs)
+    # This test wants ctime of a renamed file to be updated, but POSIX does not require it
+    # and Darwin (and secfs) do not update it!
+    #
+    # Here is the POSIX note found at:
+    # http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html
+    # <<
+    # Some implementations mark for update the last file status change timestamp of renamed files
+    # and some do not. Applications which make use of the last file status change timestamp may
+    # behave differently with respect to renamed files unless they are designed to allow for
+    # either behavior.
+    #>>
+    test_check $ctime1 -le $ctime2
+    ;;
+*)
+    test_check $ctime1 -lt $ctime2
+    ;;
+esac
 expect 0 unlink ${n1}
 
 expect 0 mkdir ${n0} 0755
@@ -85,7 +103,18 @@ ctime1=`${fstest} stat ${n0} ctime`
 sleep 1
 expect 0 rename ${n0} ${n1}
 ctime2=`${fstest} stat ${n1} ctime`
-test_check $ctime1 -lt $ctime2
+case "${os}:${fs}" in
+Darwin:*|*:secfs)
+    # This test wants ctime of a renamed file to be updated, but POSIX does not require it
+    # and Darwin (and secfs) do not update it!
+    #
+    # See comments above on POSIX note.
+    test_check $ctime1 -le $ctime2
+    ;;
+*)
+    test_check $ctime1 -lt $ctime2
+    ;;
+esac
 expect 0 rmdir ${n1}
 
 expect 0 mkfifo ${n0} 0644
@@ -93,7 +122,18 @@ ctime1=`${fstest} stat ${n0} ctime`
 sleep 1
 expect 0 rename ${n0} ${n1}
 ctime2=`${fstest} stat ${n1} ctime`
-test_check $ctime1 -lt $ctime2
+case "${os}:${fs}" in
+Darwin:*|*:secfs)
+    # This test wants ctime of a renamed file to be updated, but POSIX does not require it
+    # and Darwin (and secfs) do not update it!
+    #
+    # See comments above on POSIX note.
+    test_check $ctime1 -le $ctime2
+    ;;
+*)
+    test_check $ctime1 -lt $ctime2
+    ;;
+esac
 expect 0 unlink ${n1}
 
 expect 0 symlink ${n2} ${n0}
@@ -101,7 +141,18 @@ ctime1=`${fstest} lstat ${n0} ctime`
 sleep 1
 expect 0 rename ${n0} ${n1}
 ctime2=`${fstest} lstat ${n1} ctime`
-test_check $ctime1 -lt $ctime2
+case "${os}:${fs}" in
+Darwin:*|*:secfs)
+    # This test wants ctime of a renamed file to be updated, but POSIX does not require it
+    # and Darwin (and secfs) do not update it!
+    #
+    # See comments above on POSIX note.
+    test_check $ctime1 -le $ctime2
+    ;;
+*)
+    test_check $ctime1 -lt $ctime2
+    ;;
+esac
 expect 0 unlink ${n1}
 
 # unsuccessful link(2) does not update ctime.
diff --git a/tests/rmdir/12.t b/tests/rmdir/12.t
index 55e8829..07f2908 100755
--- a/tests/rmdir/12.t
+++ b/tests/rmdir/12.t
@@ -21,6 +21,16 @@ FreeBSD)
 Linux)
 	expect 'ENOTEMPTY|EEXIST' rmdir ${n0}/${n1}/..
 	;;
+Darwin)
+    case "${fs}" in
+    secfs)
+    	expect EINVAL rmdir ${n0}/${n1}/..
+        ;;
+    *)
+    	expect 'ENOTEMPTY' rmdir ${n0}/${n1}/..
+    	;;
+    esac
+	;;
 *)
 	expect EEXIST rmdir ${n0}/${n1}/..
 	;;
diff --git a/tests/symlink/03.t b/tests/symlink/03.t
index 570594b..0547ffb 100755
--- a/tests/symlink/03.t
+++ b/tests/symlink/03.t
@@ -6,23 +6,30 @@ desc="symlink returns ENAMETOOLONG if an entire length of either path name excee
 dir=`dirname $0`
 . ${dir}/../misc.sh
 
-echo "1..14"
+case "${os}:${fs}" in
+Darwin:HFS+)
+    # This test creates an unremovable file on Darwin:HFS+; so disable it!
+    quick_exit
+    ;;
+*)
+    echo "1..14"
 
-n0=`namegen`
+    n0=`namegen`
 
-expect 0 symlink ${path1023} ${n0}
-expect 0 unlink ${n0}
-expect 0 mkdir ${name255} 0755
-expect 0 mkdir ${name255}/${name255} 0755
-expect 0 mkdir ${name255}/${name255}/${name255} 0755
-expect 0 mkdir ${path1021} 0755
-expect 0 symlink ${n0} ${path1023}
-expect 0 unlink ${path1023}
-create_too_long
-expect ENAMETOOLONG symlink ${n0} ${too_long}
-expect ENAMETOOLONG symlink ${too_long} ${n0}
-unlink_too_long
-expect 0 rmdir ${path1021}
-expect 0 rmdir ${name255}/${name255}/${name255}
-expect 0 rmdir ${name255}/${name255}
-expect 0 rmdir ${name255}
+    expect 0 symlink ${path1023} ${n0}
+    expect 0 unlink ${n0}
+    expect 0 mkdir ${name255} 0755
+    expect 0 mkdir ${name255}/${name255} 0755
+    expect 0 mkdir ${name255}/${name255}/${name255} 0755
+    expect 0 mkdir ${path1021} 0755
+    expect 0 symlink ${n0} ${path1023}
+    expect 0 unlink ${path1023}
+    create_too_long
+    expect ENAMETOOLONG symlink ${n0} ${too_long}
+    expect ENAMETOOLONG symlink ${too_long} ${n0}
+    unlink_too_long
+    expect 0 rmdir ${path1021}
+    expect 0 rmdir ${name255}/${name255}/${name255}
+    expect 0 rmdir ${name255}/${name255}
+    expect 0 rmdir ${name255}
+esac
diff --git a/tests/truncate/12.t b/tests/truncate/12.t
index 4091fdc..8a81357 100755
--- a/tests/truncate/12.t
+++ b/tests/truncate/12.t
@@ -6,22 +6,29 @@ desc="truncate returns EFBIG or EINVAL if the length argument was greater than t
 dir=`dirname $0`
 . ${dir}/../misc.sh
 
-echo "1..3"
+case "${os}:${fs}" in
+Darwin:HFS+)
+    # This test makes the filesystem unusable on OS X 10.10; so disable it!
+    quick_exit
+    ;;
+*)
+    echo "1..3"
 
-n0=`namegen`
+    n0=`namegen`
 
-expect 0 create ${n0} 0644
-r=`${fstest} truncate ${n0} 999999999999999 2>/dev/null`
-case "${r}" in
-EFBIG|EINVAL)
-	expect 0 stat ${n0} size
-	;;
-0)
-	expect 999999999999999 stat ${n0} size
-	;;
-*)
-	echo "not ok ${ntest}"
-	ntest=`expr ${ntest} + 1`
-	;;
+    expect 0 create ${n0} 0644
+    r=`${fstest} truncate ${n0} 999999999999999 2>/dev/null`
+    case "${r}" in
+    EFBIG|EINVAL|ENOSPC)
+    	expect 0 stat ${n0} size
+    	;;
+    0)
+    	expect 999999999999999 stat ${n0} size
+    	;;
+    *)
+    	echo "not ok ${ntest}"
+    	ntest=`expr ${ntest} + 1`
+    	;;
+    esac
+    expect 0 unlink ${n0}
 esac
-expect 0 unlink ${n0}
diff --git a/tests/zzz_ResourceFork/00.t b/tests/zzz_ResourceFork/00.t
new file mode 100755
index 0000000..36b699e
--- /dev/null
+++ b/tests/zzz_ResourceFork/00.t
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+desc="Darwin resource fork basic testing"
+
+dir=`dirname $0`
+. ${dir}/../misc.sh
+
+case "${os}" in
+Darwin)
+    echo "1..6"
+
+    n0=`namegen`
+    n1=`namegen`
+
+    dd if=/dev/urandom of="${n0}" bs=1k count=1024 >/dev/null 2>&1
+    cp /dev/null "${n1}" 
+    cp -X "${n0}" "${n1}"/..namedfork/rsrc
+    test_check $? -eq 0
+    cmp "${n0}" "${n1}"/..namedfork/rsrc
+    test_check $? -eq 0
+    rm "${n0}" "${n1}"
+
+    touch "${n0}"
+    xattr -w com.apple.ResourceFork "1234567890" "${n0}"
+    test_check $? -eq 0
+    test_check $(xattr -p com.apple.ResourceFork "${n0}") == "1234567890"
+    xattr -w com.apple.ResourceFork "abcd" "${n0}"
+    test_check $? -eq 0
+    test_check $(xattr -p com.apple.ResourceFork "${n0}") == "abcd567890"
+    rm "${n0}"
+    ;;
+*)
+    quick_exit
+    ;;
+esac
+
